# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.define "server" do |node|
    node.vm.box = "ubuntu/focal64"
    node.vm.box_check_update = false
    node.vm.hostname = "server.labor.lan"
    node.vm.network "private_network", ip: "172.16.16.5"
    node.vm.synced_folder "./", "/vagrant"
  
    node.vm.provider "virtualbox" do |v|
      #v.name = ""
      v.memory = 512
      v.cpus = 1
    end
    
    node.vm.provision "shell", inline: <<-SHELL
      apt update
      apt install -y bind9
      cp /vagrant/dns/* /etc/bind/.
      systemctl restart bind9
    SHELL
    #node.vm.provision "shell", path: "/client/add_dns_ubuntu.sh"
  end


=begin
  config.vm.define "client1" do |node|
    node.vm.box = "ubuntu/groovy64"
    node.vm.box_check_update = false
    node.vm.hostname = "client1.labor.lan"
    node.vm.network "private_network", ip: "172.16.16.6"
    node.vm.synced_folder "./", "/vagrant"
  
    node.vm.provider "virtualbox" do |v|
      #v.name = ""
      v.memory = 2048
      v.cpus = 2
    end
    #node.vm.provision "shell", path: "bootstrap_ansible.sh"
  end

  config.vm.define "client2" do |node|
    node.vm.box = "generic/fedora33"
    node.vm.box_check_update = false
    node.vm.hostname = "client2.labor.lan"
    node.vm.network "private_network", ip: "172.16.16.7"
    node.vm.synced_folder "./", "/vagrant"
  
    node.vm.provider "virtualbox" do |v|
      #v.name = ""
      v.memory = 2048
      v.cpus = 2
    end
    #node.vm.provision "shell", path: "bootstrap_ansible.sh"
  end
=end
 
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  #config.vm.network "private_network", ip: "172.16.16.5"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  #config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
   # vb.gui = false
      # Customize the avmount of memory on the VM:
   # vb.memory = "4096"
   # vb.cpus = "4"
    #vb.name = "Gui Box1"
    #vb.customize ["modifyvm", :id, "--vram", "32"]
    #vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    #vb.customize ["modifyvm", :id, "--accelerate3d", "off"]
  #end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     #apt update
     #apt upgrade -y
     sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config
     echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
     systemctl reload sshd
     echo -e "kubeadmin\nkubeadmin" | passwd root >/dev/null 2>&1
     #apt-get install -y apache2
   SHELL
end
